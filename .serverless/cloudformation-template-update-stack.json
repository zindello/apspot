{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SpotswwffLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apspot-prod-spotswwff",
        "RetentionInDays": 14
      }
    },
    "SpotssotaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apspot-prod-spotssota",
        "RetentionInDays": 14
      }
    },
    "SpotssiotaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apspot-prod-spotssiota",
        "RetentionInDays": 14
      }
    },
    "SpotspotaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apspot-prod-spotspota",
        "RetentionInDays": 14
      }
    },
    "SpotpnpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apspot-prod-spotpnp",
        "RetentionInDays": 14
      }
    },
    "SpotpotaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apspot-prod-spotpota",
        "RetentionInDays": 14
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "apspot",
                  "prod",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/apspot-prod*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/apspot-prod*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "apspot",
              "prod",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SpotswwffLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/apspot/prod/1669432979415-2022-11-26T03:22:59.415Z/apspot.zip"
        },
        "Handler": "lambdas/spots_wwff.lambda_handler",
        "Runtime": "python3.9",
        "FunctionName": "apspot-prod-spotswwff",
        "MemorySize": 128,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "pnp_api_url": "https://parksnpeaks.org/api",
            "pnp_api_user_id": "APSPOT",
            "pnp_api_user_key": "8B3E819BDB11",
            "pota_api_url": "https://api.pota.app",
            "pota_api_dev_url": "https://devapi.pota.app",
            "sota_api_url": "https://https://api2.sota.org.uk"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SpotswwffLogGroup"
      ]
    },
    "SpotssotaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/apspot/prod/1669432979415-2022-11-26T03:22:59.415Z/apspot.zip"
        },
        "Handler": "lambdas/spots_sota.lambda_handler",
        "Runtime": "python3.9",
        "FunctionName": "apspot-prod-spotssota",
        "MemorySize": 128,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "pnp_api_url": "https://parksnpeaks.org/api",
            "pnp_api_user_id": "APSPOT",
            "pnp_api_user_key": "8B3E819BDB11",
            "pota_api_url": "https://api.pota.app",
            "pota_api_dev_url": "https://devapi.pota.app",
            "sota_api_url": "https://https://api2.sota.org.uk"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SpotssotaLogGroup"
      ]
    },
    "SpotssiotaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/apspot/prod/1669432979415-2022-11-26T03:22:59.415Z/apspot.zip"
        },
        "Handler": "lambdas/spots_siota.lambda_handler",
        "Runtime": "python3.9",
        "FunctionName": "apspot-prod-spotssiota",
        "MemorySize": 128,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "pnp_api_url": "https://parksnpeaks.org/api",
            "pnp_api_user_id": "APSPOT",
            "pnp_api_user_key": "8B3E819BDB11",
            "pota_api_url": "https://api.pota.app",
            "pota_api_dev_url": "https://devapi.pota.app",
            "sota_api_url": "https://https://api2.sota.org.uk"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SpotssiotaLogGroup"
      ]
    },
    "SpotspotaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/apspot/prod/1669432979415-2022-11-26T03:22:59.415Z/apspot.zip"
        },
        "Handler": "lambdas/spots_pota.lambda_handler",
        "Runtime": "python3.9",
        "FunctionName": "apspot-prod-spotspota",
        "MemorySize": 128,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "pnp_api_url": "https://parksnpeaks.org/api",
            "pnp_api_user_id": "APSPOT",
            "pnp_api_user_key": "8B3E819BDB11",
            "pota_api_url": "https://api.pota.app",
            "pota_api_dev_url": "https://devapi.pota.app",
            "sota_api_url": "https://https://api2.sota.org.uk"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SpotspotaLogGroup"
      ]
    },
    "SpotpnpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/apspot/prod/1669432979415-2022-11-26T03:22:59.415Z/apspot.zip"
        },
        "Handler": "lambdas/spot_pnp.lambda_handler",
        "Runtime": "python3.9",
        "FunctionName": "apspot-prod-spotpnp",
        "MemorySize": 128,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "pnp_api_url": "https://parksnpeaks.org/api",
            "pnp_api_user_id": "APSPOT",
            "pnp_api_user_key": "8B3E819BDB11",
            "pota_api_url": "https://api.pota.app",
            "pota_api_dev_url": "https://devapi.pota.app",
            "sota_api_url": "https://https://api2.sota.org.uk"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SpotpnpLogGroup"
      ]
    },
    "SpotpotaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/apspot/prod/1669432979415-2022-11-26T03:22:59.415Z/apspot.zip"
        },
        "Handler": "lambdas/spot_pota.lambda_handler",
        "Runtime": "python3.9",
        "FunctionName": "apspot-prod-spotpota",
        "MemorySize": 128,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "pnp_api_url": "https://parksnpeaks.org/api",
            "pnp_api_user_id": "APSPOT",
            "pnp_api_user_key": "8B3E819BDB11",
            "pota_api_url": "https://api.pota.app",
            "pota_api_dev_url": "https://devapi.pota.app",
            "sota_api_url": "https://https://api2.sota.org.uk"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SpotpotaLogGroup"
      ]
    },
    "SpotswwffLambdaVersionUaxIoaAHRDgCWz4znWI1ZYeSuBmygTrzCRxBBmIcw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotswwffLambdaFunction"
        },
        "CodeSha256": "XdRDa3zGoUpXmnnVgQ2S1MeBg/fWYBc2RcKOfCM4kr0="
      }
    },
    "SpotssotaLambdaVersionduDnakMaVoi8yOqVS9YlFyCbX5fnISOfPiuNmLvo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotssotaLambdaFunction"
        },
        "CodeSha256": "XdRDa3zGoUpXmnnVgQ2S1MeBg/fWYBc2RcKOfCM4kr0="
      }
    },
    "SpotssiotaLambdaVersionIXLcMPYsmt9vK2fukvprwBKPmGbJ9wS3SPvOhoj5o5I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotssiotaLambdaFunction"
        },
        "CodeSha256": "XdRDa3zGoUpXmnnVgQ2S1MeBg/fWYBc2RcKOfCM4kr0="
      }
    },
    "SpotspotaLambdaVersionpHPMi6LUQ5coY6JZP8ffylchTusY8IDFdUL6y03ScBY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotspotaLambdaFunction"
        },
        "CodeSha256": "XdRDa3zGoUpXmnnVgQ2S1MeBg/fWYBc2RcKOfCM4kr0="
      }
    },
    "SpotpnpLambdaVersionuzQLTkKW7AuxF6ZXZdbgwSXnQ3G5BWYAmApsh4Bps8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotpnpLambdaFunction"
        },
        "CodeSha256": "XdRDa3zGoUpXmnnVgQ2S1MeBg/fWYBc2RcKOfCM4kr0="
      }
    },
    "SpotpotaLambdaVersionsx8QN6kYlhuyJvWrOiZ3eFZpqAe2k8P7mWdHJppXwhU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SpotpotaLambdaFunction"
        },
        "CodeSha256": "XdRDa3zGoUpXmnnVgQ2S1MeBg/fWYBc2RcKOfCM4kr0="
      }
    },
    "FargateTasksCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT"
        ],
        "Tags": []
      }
    },
    "FargateTasksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "apspotv2-prod",
        "Tags": []
      }
    },
    "FargateIamExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com",
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole"
        ],
        "Tags": []
      }
    },
    "FargateIamTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [],
        "ManagedPolicyArns": [],
        "Tags": []
      }
    },
    "ApspotaprsprodTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "apspot-aprs-prod",
            "Image": "276800331103.dkr.ecr.ap-southeast-2.amazonaws.com/serverless-apspot-prod@sha256:e1bec2b6095181dc3f44afe25be249011ceb64d16fb530ee8ab29dd650e2b253",
            "Environment": [
              {
                "Name": "pnp_api_url",
                "Value": "https://parksnpeaks.org/api"
              },
              {
                "Name": "pnp_api_user_id",
                "Value": "APSPOT"
              },
              {
                "Name": "pnp_api_user_key",
                "Value": "8B3E819BDB11"
              },
              {
                "Name": "pota_api_url",
                "Value": "https://api.pota.app"
              },
              {
                "Name": "pota_api_dev_url",
                "Value": "https://devapi.pota.app"
              },
              {
                "Name": "sota_api_url",
                "Value": "https://https://api2.sota.org.uk"
              },
              {
                "Name": "CALLSIGN",
                "Value": "APSPOT"
              },
              {
                "Name": "PASSCODE",
                "Value": 11958
              },
              {
                "Name": "APSPOTAPIURL",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Ref": "HttpApi"
                      },
                      ".execute-api.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            ],
            "EntryPoint": [],
            "Command": [],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-region": {
                  "Fn::Sub": "${AWS::Region}"
                },
                "awslogs-group": {
                  "Fn::Sub": "${FargateTasksLogGroup}"
                },
                "awslogs-stream-prefix": "fargate"
              }
            }
          }
        ],
        "Family": "apspot-aprs-prod",
        "NetworkMode": "awsvpc",
        "ExecutionRoleArn": "apspotv2prodexecutionrole",
        "TaskRoleArn": {
          "Fn::Sub": "${FargateIamTaskRole}"
        },
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "Memory": "0.5GB",
        "Cpu": 256,
        "Tags": []
      }
    },
    "ApspotaprsprodService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Fn::Sub": "${FargateTasksCluster}"
        },
        "ServiceName": "apspot-aprs-prod",
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 1
          }
        ],
        "DesiredCount": 1,
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100
        },
        "TaskDefinition": {
          "Fn::Sub": "${ApspotaprsprodTask}"
        },
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              {
                "Ref": "apspotv2prodsecuritygroup"
              }
            ],
            "Subnets": [
              "subnet-00c92e2dc4d011de0",
              "subnet-087babeeccbd7aed1",
              "subnet-0161f2654d1a95ac3"
            ]
          }
        },
        "PropagateTags": "TASK_DEFINITION",
        "Tags": []
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "apspot",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": true
        }
      }
    },
    "SpotswwffLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotswwffLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSpotswwff": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SpotswwffLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "HttpApiRouteGetSpotsWwff": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /spots/wwff",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSpotswwff"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSpotswwff"
    },
    "SpotssotaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotssotaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSpotssota": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SpotssotaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "HttpApiRouteGetSpotsSota": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /spots/sota",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSpotssota"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSpotssota"
    },
    "SpotssiotaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotssiotaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSpotssiota": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SpotssiotaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "HttpApiRouteGetSpotsSiota": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /spots/siota",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSpotssiota"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSpotssiota"
    },
    "SpotspotaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotspotaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSpotspota": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SpotspotaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "HttpApiRouteGetSpotsPota": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /spots/pota",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSpotspota"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSpotspota"
    },
    "SpotpnpLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotpnpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSpotpnp": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SpotpnpLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "HttpApiRouteGetSpotPnp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /spot/pnp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSpotpnp"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSpotpnp"
    },
    "SpotpotaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SpotpotaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSpotpota": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SpotpotaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "HttpApiRouteGetSpotPota": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /spot/pota",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSpotpota"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSpotpota"
    },
    "apspotv2prodsecuritygroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group",
        "VpcId": "vpc-0129fb45f049ff482"
      }
    },
    "apspotv2prodexecutionrole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "apspotv2prodexecutionrole",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ContainerRolePolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:DescribeLogGroups",
                    "logs:PutRetentionPolicy",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:DeleteAlarms",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm"
                  ],
                  "Resource": [
                    "arn:aws:cloudwatch:*:*:alarm:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:ecr:ap-southeast-2:276800331103:repository/apspot-aprs-prod"
                  ],
                  "Action": [
                    "ecr:BatchGetImage"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Action": [
                    "ecr:DescribeImages",
                    "ecr:DescribeRepositories",
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage"
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-apspot-prod-ServerlessDeploymentBucketName"
      }
    },
    "SpotswwffLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotswwffLambdaVersionUaxIoaAHRDgCWz4znWI1ZYeSuBmygTrzCRxBBmIcw"
      },
      "Export": {
        "Name": "sls-apspot-prod-SpotswwffLambdaFunctionQualifiedArn"
      }
    },
    "SpotssotaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotssotaLambdaVersionduDnakMaVoi8yOqVS9YlFyCbX5fnISOfPiuNmLvo"
      },
      "Export": {
        "Name": "sls-apspot-prod-SpotssotaLambdaFunctionQualifiedArn"
      }
    },
    "SpotssiotaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotssiotaLambdaVersionIXLcMPYsmt9vK2fukvprwBKPmGbJ9wS3SPvOhoj5o5I"
      },
      "Export": {
        "Name": "sls-apspot-prod-SpotssiotaLambdaFunctionQualifiedArn"
      }
    },
    "SpotspotaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotspotaLambdaVersionpHPMi6LUQ5coY6JZP8ffylchTusY8IDFdUL6y03ScBY"
      },
      "Export": {
        "Name": "sls-apspot-prod-SpotspotaLambdaFunctionQualifiedArn"
      }
    },
    "SpotpnpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotpnpLambdaVersionuzQLTkKW7AuxF6ZXZdbgwSXnQ3G5BWYAmApsh4Bps8"
      },
      "Export": {
        "Name": "sls-apspot-prod-SpotpnpLambdaFunctionQualifiedArn"
      }
    },
    "SpotpotaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SpotpotaLambdaVersionsx8QN6kYlhuyJvWrOiZ3eFZpqAe2k8P7mWdHJppXwhU"
      },
      "Export": {
        "Name": "sls-apspot-prod-SpotpotaLambdaFunctionQualifiedArn"
      }
    },
    "ApspotaprsprodTaskArn": {
      "Value": {
        "Ref": "ApspotaprsprodTask"
      },
      "Export": {
        "Name": "sls-apspot-prod-ApspotaprsprodTaskArn"
      }
    },
    "ApspotaprsprodServiceArn": {
      "Value": {
        "Ref": "ApspotaprsprodService"
      },
      "Export": {
        "Name": "sls-apspot-prod-ApspotaprsprodServiceArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-apspot-prod-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-apspot-prod-HttpApiUrl"
      }
    }
  }
}