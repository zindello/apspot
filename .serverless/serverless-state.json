{
  "service": {
    "service": "apspot",
    "serviceObject": {
      "name": "apspot"
    },
    "provider": {
      "name": "aws",
      "stage": "dev-",
      "region": "ap-southeast-2",
      "tracing": {
        "apiGateway": true,
        "lambda": true
      },
      "runtime": "python3.9",
      "logRetentionInDays": 14,
      "httpApi": {
        "name": "apspot",
        "metrics": true
      },
      "environment": {
        "pnp_api_url": "https://parksnpeaks.org/api",
        "pnp_api_user_id": "APSPOT",
        "pnp_api_user_key": "8B3E819BDB11",
        "pota_api_url": "https://api.pota.app",
        "pota_api_dev_url": "https://devapi.pota.app",
        "sota_api_url": "https://https://api2.sota.org.uk",
        "APSPOTAPIURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "HttpApi"
              },
              ".execute-api.",
              {
                "Ref": "AWS::Region"
              },
              ".",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        }
      },
      "ecr": {
        "images": {
          "apspot-aprs": {
            "path": "./fargate/",
            "file": "DockerfileAPSPOT",
            "platform": "linux/amd64"
          }
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "SpotswwffLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-spotswwff",
              "RetentionInDays": 14
            }
          },
          "SpotssotaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-spotssota",
              "RetentionInDays": 14
            }
          },
          "SpotssiotaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-spotssiota",
              "RetentionInDays": 14
            }
          },
          "SpotspotaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-spotspota",
              "RetentionInDays": 14
            }
          },
          "SpotpnpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-spotpnp",
              "RetentionInDays": 14
            }
          },
          "SpotpotaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-spotpota",
              "RetentionInDays": 14
            }
          },
          "SnssmsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-snssms",
              "RetentionInDays": 14
            }
          },
          "SearchpotaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-searchpota",
              "RetentionInDays": 14
            }
          },
          "ProcessmessageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/apspot-dev-processmessage",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "apspot",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/apspot-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/apspot-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "apspot",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SpotswwffLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/spots_wwff.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-spotswwff",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SpotswwffLogGroup"
            ]
          },
          "SpotssotaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/spots_sota.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-spotssota",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SpotssotaLogGroup"
            ]
          },
          "SpotssiotaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/spots_siota.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-spotssiota",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SpotssiotaLogGroup"
            ]
          },
          "SpotspotaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/spots_pota.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-spotspota",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SpotspotaLogGroup"
            ]
          },
          "SpotpnpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/spot_pnp.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-spotpnp",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SpotpnpLogGroup"
            ]
          },
          "SpotpotaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/spot_pota.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-spotpota",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SpotpotaLogGroup"
            ]
          },
          "SnssmsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/sns_sms.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-snssms",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SnssmsLogGroup"
            ]
          },
          "SearchpotaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/search_pota.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-searchpota",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SearchpotaLogGroup"
            ]
          },
          "ProcessmessageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z/apspot.zip"
              },
              "Handler": "lambdas/processmessage.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "apspot-dev-processmessage",
              "MemorySize": 128,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "pnp_api_url": "https://parksnpeaks.org/api",
                  "pnp_api_user_id": "APSPOT",
                  "pnp_api_user_key": "8B3E819BDB11",
                  "pota_api_url": "https://api.pota.app",
                  "pota_api_dev_url": "https://devapi.pota.app",
                  "sota_api_url": "https://https://api2.sota.org.uk",
                  "APSPOTAPIURL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APSPOTAPIURL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProcessmessageLogGroup"
            ]
          },
          "SpotswwffLambdaVersion3ah5q25swOGFt9MNaWYg8yqs9nW3oB99jHMuEnJBs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SpotswwffLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "SpotssotaLambdaVersionXHQBv9FYXRaxJETZFfil5OfyjCGFV7lMb5MDmzllk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SpotssotaLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "SpotssiotaLambdaVersioni0Di71ca9poIILKTS0NckcTylOSWFm8Qef0YIjZ8BHM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SpotssiotaLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "SpotspotaLambdaVersionXdN4YZdUUZKvk5cOkJh75J9Jolek8AP9H6ykNaHzA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SpotspotaLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "SpotpnpLambdaVersionVzUynpxQ7lhHVH295co8lehPoJowEW0BCF2mFgy4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SpotpnpLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "SpotpotaLambdaVersionUJedUU8IH234lobbRhuf1r7gV0WJHARYKh1hixwRs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SpotpotaLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "SnssmsLambdaVersionGcJs4sgHZcJIgptFtdhV0obUH6pMuEKNMwJncyIY4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SnssmsLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "SearchpotaLambdaVersionwEjUIhMR7tJA0SsUf8thXvMkd0f0bb9RVpQ7zbOBI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SearchpotaLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "ProcessmessageLambdaVersion4FWGbXFnPSr1b3FFbRIdUlEac4Kot5WPH9AW10PLdD8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessmessageLambdaFunction"
              },
              "CodeSha256": "AOTxDS0MzhKvMBx3Fx5ce7R61Qz2rCsG+yHZ1nhCDsI="
            }
          },
          "FargateTasksCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
              "CapacityProviders": [
                "FARGATE",
                "FARGATE_SPOT"
              ],
              "Tags": []
            }
          },
          "FargateTasksLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "apspot-aprs",
              "Tags": []
            }
          },
          "FargateIamExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com",
                        "events.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
                "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole"
              ],
              "Tags": []
            }
          },
          "FargateIamTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "FargateTaskPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "ManagedPolicyArns": [],
              "Tags": []
            }
          },
          "ApspotaprsdevTask": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
              "ContainerDefinitions": [
                {
                  "Name": "apspot-aprs-dev",
                  "Image": "276800331103.dkr.ecr.ap-southeast-2.amazonaws.com/serverless-apspot-dev@sha256:b24fdcaff20dff9f7323b73ec64a8418f01a32f101f5c7ef4ee1ea40290f6476",
                  "Environment": [
                    {
                      "Name": "pnp_api_url",
                      "Value": "https://parksnpeaks.org/api"
                    },
                    {
                      "Name": "pnp_api_user_id",
                      "Value": "APSPOT"
                    },
                    {
                      "Name": "pnp_api_user_key",
                      "Value": "8B3E819BDB11"
                    },
                    {
                      "Name": "pota_api_url",
                      "Value": "https://api.pota.app"
                    },
                    {
                      "Name": "pota_api_dev_url",
                      "Value": "https://devapi.pota.app"
                    },
                    {
                      "Name": "sota_api_url",
                      "Value": "https://https://api2.sota.org.uk"
                    },
                    {
                      "Name": "APSPOTAPIURL",
                      "Value": {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {
                              "Ref": "HttpApi"
                            },
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".",
                            {
                              "Ref": "AWS::URLSuffix"
                            }
                          ]
                        ]
                      }
                    },
                    {
                      "Name": "CALLSIGN",
                      "Value": "APSPO7"
                    },
                    {
                      "Name": "PASSCODE",
                      "Value": 11989
                    }
                  ],
                  "EntryPoint": [],
                  "Command": [],
                  "LogConfiguration": {
                    "LogDriver": "awslogs",
                    "Options": {
                      "awslogs-region": {
                        "Fn::Sub": "${AWS::Region}"
                      },
                      "awslogs-group": {
                        "Fn::Sub": "${FargateTasksLogGroup}"
                      },
                      "awslogs-stream-prefix": "fargate"
                    }
                  }
                }
              ],
              "Family": "apspot-aprs-dev",
              "NetworkMode": "awsvpc",
              "ExecutionRoleArn": "apspotv2-dev-executionrole",
              "TaskRoleArn": {
                "Fn::Sub": "${FargateIamTaskRole}"
              },
              "RequiresCompatibilities": [
                "FARGATE"
              ],
              "Memory": "0.5GB",
              "Cpu": 256,
              "Tags": []
            }
          },
          "ApspotaprsdevService": {
            "Type": "AWS::ECS::Service",
            "Properties": {
              "Cluster": {
                "Fn::Sub": "${FargateTasksCluster}"
              },
              "ServiceName": "apspot-aprs-dev",
              "CapacityProviderStrategy": [
                {
                  "CapacityProvider": "FARGATE",
                  "Weight": 1
                }
              ],
              "DesiredCount": 1,
              "DeploymentConfiguration": {
                "MaximumPercent": 200,
                "MinimumHealthyPercent": 100
              },
              "TaskDefinition": {
                "Fn::Sub": "${ApspotaprsdevTask}"
              },
              "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                  "AssignPublicIp": "ENABLED",
                  "SecurityGroups": [
                    {
                      "Ref": "apspotv2securitygroup"
                    }
                  ],
                  "Subnets": [
                    "subnet-00c92e2dc4d011de0",
                    "subnet-087babeeccbd7aed1",
                    "subnet-0161f2654d1a95ac3"
                  ]
                }
              },
              "PropagateTags": "TASK_DEFINITION",
              "Tags": []
            }
          },
          "SnssmsSnsSubscriptionAPSPOTPinpointDev": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": "arn:aws:sns:ap-southeast-2:276800331103:APSPOT-Pinpoint-Dev",
              "Protocol": "lambda",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SnssmsLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "SnssmsLambdaPermissionAPSPOTPinpointDevSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SnssmsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "sns.amazonaws.com",
              "SourceArn": "arn:aws:sns:ap-southeast-2:276800331103:APSPOT-Pinpoint-Dev"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "apspot",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": true
              }
            }
          },
          "SpotswwffLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotswwffLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSpotswwff": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SpotswwffLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetSpotsWwff": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /spots/wwff",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSpotswwff"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSpotswwff"
          },
          "SpotssotaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotssotaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSpotssota": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SpotssotaLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetSpotsSota": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /spots/sota",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSpotssota"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSpotssota"
          },
          "SpotssiotaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotssiotaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSpotssiota": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SpotssiotaLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetSpotsSiota": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /spots/siota",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSpotssiota"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSpotssiota"
          },
          "SpotspotaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotspotaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSpotspota": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SpotspotaLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetSpotsPota": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /spots/pota",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSpotspota"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSpotspota"
          },
          "SpotpnpLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotpnpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSpotpnp": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SpotpnpLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetSpotPnp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /spot/pnp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSpotpnp"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSpotpnp"
          },
          "SpotpotaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SpotpotaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSpotpota": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SpotpotaLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetSpotPota": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /spot/pota",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSpotpota"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSpotpota"
          },
          "SearchpotaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SearchpotaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSearchpota": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SearchpotaLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetSearchPota": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /search/pota",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSearchpota"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSearchpota"
          },
          "ProcessmessageLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessmessageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationProcessmessage": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ProcessmessageLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "HttpApiRouteGetProcessmessage": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /processmessage",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationProcessmessage"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationProcessmessage"
          },
          "apspotv2securitygroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Security Group",
              "VpcId": "vpc-0129fb45f049ff482"
            }
          },
          "apspotv2executionrole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "apspotv2-dev-executionrole",
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "ContainerRolePolicy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:DescribeLogGroups",
                          "logs:PutRetentionPolicy",
                          "logs:CreateLogStream",
                          "logs:DescribeLogStreams",
                          "logs:PutLogEvents"
                        ],
                        "Effect": "Allow",
                        "Resource": [
                          "*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cloudwatch:DeleteAlarms",
                          "cloudwatch:DescribeAlarms",
                          "cloudwatch:PutMetricAlarm"
                        ],
                        "Resource": [
                          "arn:aws:cloudwatch:*:*:alarm:*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": "*",
                        "Action": [
                          "ec2:CreateNetworkInterface",
                          "ec2:DescribeNetworkInterfaces",
                          "ec2:DeleteNetworkInterface"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": [
                          "arn:aws:ecr:ap-southeast-2:276800331103:repository/apspot-aprs-dev"
                        ],
                        "Action": [
                          "ecr:BatchGetImage"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": [
                          "*"
                        ],
                        "Action": [
                          "ecr:DescribeImages",
                          "ecr:DescribeRepositories",
                          "ecr:GetAuthorizationToken",
                          "ecr:BatchCheckLayerAvailability",
                          "ecr:GetDownloadUrlForLayer",
                          "ecr:BatchGetImage"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-apspot-dev-ServerlessDeploymentBucketName"
            }
          },
          "SpotswwffLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SpotswwffLambdaVersion3ah5q25swOGFt9MNaWYg8yqs9nW3oB99jHMuEnJBs"
            },
            "Export": {
              "Name": "sls-apspot-dev-SpotswwffLambdaFunctionQualifiedArn"
            }
          },
          "SpotssotaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SpotssotaLambdaVersionXHQBv9FYXRaxJETZFfil5OfyjCGFV7lMb5MDmzllk"
            },
            "Export": {
              "Name": "sls-apspot-dev-SpotssotaLambdaFunctionQualifiedArn"
            }
          },
          "SpotssiotaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SpotssiotaLambdaVersioni0Di71ca9poIILKTS0NckcTylOSWFm8Qef0YIjZ8BHM"
            },
            "Export": {
              "Name": "sls-apspot-dev-SpotssiotaLambdaFunctionQualifiedArn"
            }
          },
          "SpotspotaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SpotspotaLambdaVersionXdN4YZdUUZKvk5cOkJh75J9Jolek8AP9H6ykNaHzA"
            },
            "Export": {
              "Name": "sls-apspot-dev-SpotspotaLambdaFunctionQualifiedArn"
            }
          },
          "SpotpnpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SpotpnpLambdaVersionVzUynpxQ7lhHVH295co8lehPoJowEW0BCF2mFgy4"
            },
            "Export": {
              "Name": "sls-apspot-dev-SpotpnpLambdaFunctionQualifiedArn"
            }
          },
          "SpotpotaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SpotpotaLambdaVersionUJedUU8IH234lobbRhuf1r7gV0WJHARYKh1hixwRs"
            },
            "Export": {
              "Name": "sls-apspot-dev-SpotpotaLambdaFunctionQualifiedArn"
            }
          },
          "SnssmsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SnssmsLambdaVersionGcJs4sgHZcJIgptFtdhV0obUH6pMuEKNMwJncyIY4"
            },
            "Export": {
              "Name": "sls-apspot-dev-SnssmsLambdaFunctionQualifiedArn"
            }
          },
          "SearchpotaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SearchpotaLambdaVersionwEjUIhMR7tJA0SsUf8thXvMkd0f0bb9RVpQ7zbOBI"
            },
            "Export": {
              "Name": "sls-apspot-dev-SearchpotaLambdaFunctionQualifiedArn"
            }
          },
          "ProcessmessageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessmessageLambdaVersion4FWGbXFnPSr1b3FFbRIdUlEac4Kot5WPH9AW10PLdD8"
            },
            "Export": {
              "Name": "sls-apspot-dev-ProcessmessageLambdaFunctionQualifiedArn"
            }
          },
          "ApspotaprsdevTaskArn": {
            "Value": {
              "Ref": "ApspotaprsdevTask"
            },
            "Export": {
              "Name": "sls-apspot-dev-ApspotaprsdevTaskArn"
            }
          },
          "ApspotaprsdevServiceArn": {
            "Value": {
              "Ref": "ApspotaprsdevService"
            },
            "Export": {
              "Name": "sls-apspot-dev-ApspotaprsdevServiceArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-apspot-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-apspot-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-python-requirements",
      "serverless-fargate"
    ],
    "pluginsData": {},
    "functions": {
      "spotswwff": {
        "handler": "lambdas/spots_wwff.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/spots/wwff"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/spots/wwff"
          }
        ],
        "name": "apspot-dev-spotswwff",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SpotswwffLambdaVersion3ah5q25swOGFt9MNaWYg8yqs9nW3oB99jHMuEnJBs"
      },
      "spotssota": {
        "handler": "lambdas/spots_sota.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/spots/sota"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/spots/sota"
          }
        ],
        "name": "apspot-dev-spotssota",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SpotssotaLambdaVersionXHQBv9FYXRaxJETZFfil5OfyjCGFV7lMb5MDmzllk"
      },
      "spotssiota": {
        "handler": "lambdas/spots_siota.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/spots/siota"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/spots/siota"
          }
        ],
        "name": "apspot-dev-spotssiota",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SpotssiotaLambdaVersioni0Di71ca9poIILKTS0NckcTylOSWFm8Qef0YIjZ8BHM"
      },
      "spotspota": {
        "handler": "lambdas/spots_pota.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/spots/pota"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/spots/pota"
          }
        ],
        "name": "apspot-dev-spotspota",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SpotspotaLambdaVersionXdN4YZdUUZKvk5cOkJh75J9Jolek8AP9H6ykNaHzA"
      },
      "spotpnp": {
        "handler": "lambdas/spot_pnp.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/spot/pnp"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/spot/pnp"
          }
        ],
        "name": "apspot-dev-spotpnp",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SpotpnpLambdaVersionVzUynpxQ7lhHVH295co8lehPoJowEW0BCF2mFgy4"
      },
      "spotpota": {
        "handler": "lambdas/spot_pota.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/spot/pota"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/spot/pota"
          }
        ],
        "name": "apspot-dev-spotpota",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SpotpotaLambdaVersionUJedUU8IH234lobbRhuf1r7gV0WJHARYKh1hixwRs"
      },
      "snssms": {
        "handler": "lambdas/sns_sms.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "sns": {
              "arn": "arn:aws:sns:ap-southeast-2:276800331103:APSPOT-Pinpoint-Dev",
              "topicName": "APSPOT-Pinpoint-Dev"
            }
          }
        ],
        "name": "apspot-dev-snssms",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SnssmsLambdaVersionGcJs4sgHZcJIgptFtdhV0obUH6pMuEKNMwJncyIY4"
      },
      "searchpota": {
        "handler": "lambdas/search_pota.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/search/pota"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/search/pota"
          }
        ],
        "name": "apspot-dev-searchpota",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SearchpotaLambdaVersionwEjUIhMR7tJA0SsUf8thXvMkd0f0bb9RVpQ7zbOBI"
      },
      "processmessage": {
        "handler": "lambdas/processmessage.lambda_handler",
        "memorySize": 128,
        "events": [
          {
            "httpApi": {
              "method": "GET",
              "path": "/processmessage"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/processmessage"
          }
        ],
        "name": "apspot-dev-processmessage",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ProcessmessageLambdaVersion4FWGbXFnPSr1b3FFbRIdUlEac4Kot5WPH9AW10PLdD8"
      }
    },
    "resources": {
      "Resources": {
        "apspotv2securitygroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Security Group",
            "VpcId": "vpc-0129fb45f049ff482"
          }
        },
        "apspotv2executionrole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "apspotv2-dev-executionrole",
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "ecs-tasks.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "ContainerRolePolicy",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:DescribeLogGroups",
                        "logs:PutRetentionPolicy",
                        "logs:CreateLogStream",
                        "logs:DescribeLogStreams",
                        "logs:PutLogEvents"
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        "*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cloudwatch:DeleteAlarms",
                        "cloudwatch:DescribeAlarms",
                        "cloudwatch:PutMetricAlarm"
                      ],
                      "Resource": [
                        "arn:aws:cloudwatch:*:*:alarm:*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Resource": "*",
                      "Action": [
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Resource": [
                        "arn:aws:ecr:ap-southeast-2:276800331103:repository/apspot-aprs-dev"
                      ],
                      "Action": [
                        "ecr:BatchGetImage"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Resource": [
                        "*"
                      ],
                      "Action": [
                        "ecr:DescribeImages",
                        "ecr:DescribeRepositories",
                        "ecr:GetAuthorizationToken",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "apspot",
      "frameworkVersion": "3",
      "configValidationMode": "warn",
      "deprecationNotificationMode": "warn:summary",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "fargate": {
        "memory": "0.5GB",
        "cpu": 256,
        "environment": {
          "CALLSIGN": "APSPO7",
          "PASSCODE": 11989,
          "APSPOTAPIURL": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApspotaprsdevTask\"][\"Properties\"][\"ContainerDefinitions\"][0][\"Environment\"][6][\"Value\"]"
          }
        },
        "logGroupName": "apspot-aprs",
        "executionRoleArn": "apspotv2-dev-executionrole",
        "vpc": {
          "securityGroupIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApspotaprsdevService\"][\"Properties\"][\"NetworkConfiguration\"][\"AwsvpcConfiguration\"][\"SecurityGroups\"]"
          },
          "subnetIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApspotaprsdevService\"][\"Properties\"][\"NetworkConfiguration\"][\"AwsvpcConfiguration\"][\"Subnets\"]"
          },
          "assignPublicIp": true
        },
        "tasks": {
          "apspot-aprs": {
            "name": "apspot-aprs-dev",
            "image": "apspot-aprs",
            "service": {
              "desiredCount": 1
            }
          }
        }
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "deprecationNotificationMode": "warn:summary",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/zindello/repositories/zindello-gitlab/apspot/.serverless/apspot.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/apspot/dev/1669517895173-2022-11-27T02:58:15.173Z",
    "artifact": "apspot.zip"
  }
}